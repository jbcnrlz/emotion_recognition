import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from pathlib import Path
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise de Emo√ß√µes Facial",
    page_icon="üòä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
    }
    .positive { color: #2ecc71; }
    .negative { color: #e74c3c; }
    .neutral { color: #95a5a6; }
</style>
""", unsafe_allow_html=True)

def carregar_dados(uploaded_file):
    """Carrega e processa os dados do arquivo CSV"""
    try:
        df = pd.read_csv(uploaded_file)
        return df
    except Exception as e:
        st.error(f"Erro ao carregar arquivo: {e}")
        return None

def processar_dados_hedonicos(df):
    """Processa dados para an√°lise hed√¥nica"""
    # Classificar emo√ß√µes em categorias hed√¥nicas
    emocao_hedonica = {
        'positivo': ['happy', 'elated', 'hopeful', 'surprised', 'proud', 'loved'],
        'negativo': ['angry', 'disgusted', 'fearful', 'sad', 'fatigued', 'contempt'],
        'neutro': ['astonished', 'neutral']
    }
    
    df_processed = df.copy()
    
    # Calcular scores hed√¥nicos
    df_processed['score_positivo'] = df_processed[emocao_hedonica['positivo']].sum(axis=1)
    df_processed['score_negativo'] = df_processed[emocao_hedonica['negativo']].sum(axis=1)
    df_processed['score_neutro'] = df_processed[emocao_hedonica['neutro']].sum(axis=1)
    
    # Classificar domin√¢ncia hed√¥nica
    df_processed['dominancia_hedonica'] = df_processed[['score_positivo', 'score_negativo', 'score_neutro']].idxmax(axis=1)
    df_processed['dominancia_hedonica'] = df_processed['dominancia_hedonica'].str.replace('score_', '')
    
    # Extrair informa√ß√µes da pessoa e frame
    df_processed['pessoa_id'] = df_processed['file'].str.extract(r'pessoa_(\d+)')
    df_processed['frame_num'] = df_processed['file'].str.extract(r'frame_(\d+)').fillna('0').astype(int)
    
    return df_processed, emocao_hedonica

def criar_visualizacao_geral(df, df_processed):
    """Cria visualiza√ß√µes gerais do dataset"""
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä Distribui√ß√£o Geral das Emo√ß√µes")
        
        # Calcular m√©dias
        emocao_medias = df.drop('file', axis=1).mean().sort_values(ascending=True)
        
        # Gr√°fico de barras horizontal
        fig = px.bar(
            x=emocao_medias.values,
            y=emocao_medias.index,
            orientation='h',
            title='Probabilidade M√©dia de Cada Emo√ß√£o',
            labels={'x': 'Probabilidade M√©dia', 'y': 'Emo√ß√£o'}
        )
        fig.update_traces(marker_color='lightblue')
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("üòä An√°lise Hed√¥nica")
        
        # Distribui√ß√£o hed√¥nica
        hedonica_counts = df_processed['dominancia_hedonica'].value_counts()
        colors = {'positivo': '#2ecc71', 'negativo': '#e74c3c', 'neutro': '#95a5a6'}
        
        fig = px.pie(
            values=hedonica_counts.values,
            names=hedonica_counts.index,
            title='Distribui√ß√£o Hed√¥nica das Express√µes',
            color=hedonica_counts.index,
            color_discrete_map=colors
        )
        st.plotly_chart(fig, use_container_width=True)

def criar_metricas_gerais(df, df_processed):
    """Exibe m√©tricas gerais"""
    
    st.subheader("üìà M√©tricas Gerais")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Total de Imagens", len(df))
    
    with col2:
        st.metric("Pessoas √önicas", df_processed['pessoa_id'].nunique())
    
    with col3:
        emocao_dominante_geral = df.drop('file', axis=1).mean().idxmax()
        st.metric("Emo√ß√£o Mais Frequente", emocao_dominante_geral)
    
    with col4:
        hedonica_dominante = df_processed['dominancia_hedonica'].value_counts().idxmax()
        st.metric("Predomin√¢ncia Hed√¥nica", hedonica_dominante.capitalize())

def criar_analise_individual(df_processed):
    """Cria an√°lise individual por pessoa"""
    
    st.subheader("üë§ An√°lise Individual por Pessoa")
    
    # Selecionar pessoa
    pessoas_unicas = sorted(df_processed['pessoa_id'].unique())
    
    if pessoas_unicas:
        pessoa_selecionada = st.selectbox("Selecione uma pessoa:", pessoas_unicas)
        
        if pessoa_selecionada:
            dados_pessoa = df_processed[df_processed['pessoa_id'] == pessoa_selecionada].sort_values('frame_num')
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Gr√°fico de pizza das emo√ß√µes dominantes
                emocao_dominante = dados_pessoa.drop(['file', 'pessoa_id', 'score_positivo', 
                                                   'score_negativo', 'score_neutro', 
                                                   'dominancia_hedonica', 'frame_num'], axis=1)
                emocao_dominante = emocao_dominante.idxmax(axis=1)
                contagem_emocao = emocao_dominante.value_counts()
                
                fig = px.pie(
                    values=contagem_emocao.values,
                    names=contagem_emocao.index,
                    title=f'Distribui√ß√£o Emocional - Pessoa {pessoa_selecionada}'
                )
                st.plotly_chart(fig, use_container_width=True)
            
            with col2:
                # Evolu√ß√£o temporal
                st.write(f"**Evolu√ß√£o Temporal - Pessoa {pessoa_selecionada}**")
                
                # Selecionar emo√ß√µes para plotar
                emocoes_disponiveis = [col for col in dados_pessoa.columns if col not in 
                                     ['file', 'pessoa_id', 'score_positivo', 'score_negativo', 
                                      'score_neutro', 'dominancia_hedonica', 'frame_num']]
                
                emocoes_selecionadas = st.multiselect(
                    "Selecione as emo√ß√µes para visualizar:",
                    emocoes_disponiveis,
                    default=['hopeful', 'happy', 'neutral'][:min(3, len(emocoes_disponiveis))]
                )
                
                if emocoes_selecionadas and len(dados_pessoa) > 1:
                    fig = go.Figure()
                    for emocao in emocoes_selecionadas:
                        fig.add_trace(go.Scatter(
                            x=dados_pessoa['frame_num'],
                            y=dados_pessoa[emocao],
                            name=emocao,
                            mode='lines+markers'
                        ))
                    
                    fig.update_layout(
                        title=f'Evolu√ß√£o das Emo√ß√µes - Pessoa {pessoa_selecionada}',
                        xaxis_title='N√∫mero do Frame',
                        yaxis_title='Probabilidade',
                        height=400
                    )
                    st.plotly_chart(fig, use_container_width=True)
                elif len(dados_pessoa) == 1:
                    st.info("Apenas uma imagem dispon√≠vel para esta pessoa.")

def criar_analise_detalhada_hedonica(df_processed):
    """Cria an√°lise detalhada hed√¥nica"""
    
    st.subheader("üçΩÔ∏è An√°lise Hed√¥nica Detalhada")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Heatmap de correla√ß√£o entre emo√ß√µes positivas
        emocoes_positivas = ['happy', 'elated', 'hopeful', 'surprised', 'proud', 'loved']
        emocoes_positivas_disponiveis = [emo for emo in emocoes_positivas if emo in df_processed.columns]
        
        if len(emocoes_positivas_disponiveis) > 1:
            correlacao_positiva = df_processed[emocoes_positivas_disponiveis].corr()
            
            fig = px.imshow(
                correlacao_positiva,
                title='Correla√ß√£o entre Emo√ß√µes Positivas',
                aspect='auto'
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("Emo√ß√µes positivas insuficientes para an√°lise de correla√ß√£o.")
    
    with col2:
        # Heatmap de correla√ß√£o entre emo√ß√µes negativas
        emocoes_negativas = ['angry', 'disgusted', 'fearful', 'sad', 'fatigued', 'contempt']
        emocoes_negativas_disponiveis = [emo for emo in emocoes_negativas if emo in df_processed.columns]
        
        if len(emocoes_negativas_disponiveis) > 1:
            correlacao_negativa = df_processed[emocoes_negativas_disponiveis].corr()
            
            fig = px.imshow(
                correlacao_negativa,
                title='Correla√ß√£o entre Emo√ß√µes Negativas',
                aspect='auto'
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("Emo√ß√µes negativas insuficientes para an√°lise de correla√ß√£o.")

def criar_relatorio_final(df, df_processed):
    """Cria relat√≥rio final com insights"""
    
    st.subheader("üìã Relat√≥rio Final - Avalia√ß√£o do Momento de Consumo")
    
    # C√°lculos finais
    emocao_medias = df.drop('file', axis=1).mean().sort_values(ascending=False)
    hedonica_counts = df_processed['dominancia_hedonica'].value_counts()
    hedonica_percent = (hedonica_counts / len(df_processed) * 100).round(2)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**Top 5 Emo√ß√µes Mais Frequentes:**")
        for i, (emocao, prob) in enumerate(emocao_medias.head(5).items(), 1):
            st.write(f"{i}. **{emocao}**: {prob:.3f} ({prob*100:.1f}%)")
    
    with col2:
        st.write("**Distribui√ß√£o Hed√¥nica:**")
        for categoria in ['positivo', 'negativo', 'neutro']:
            percentual = hedonica_percent.get(categoria, 0)
            cor = "üü¢" if categoria == "positivo" else "üî¥" if categoria == "negativo" else "‚ö™"
            st.write(f"{cor} **{categoria.capitalize()}**: {percentual}%")
    
    # Avalia√ß√£o geral
    st.markdown("---")
    st.subheader("üéØ Avalia√ß√£o Geral do Momento de Consumo")
    
    percent_positivo = hedonica_percent.get('positivo', 0)
    percent_negativo = hedonica_percent.get('negativo', 0)
    
    if percent_positivo > 60:
        st.success("""
        **‚úÖ EXPERI√äNCIA POSITIVA**
        
        A an√°lise indica uma experi√™ncia predominantemente **positiva** durante o consumo. 
        As express√µes faciais sugerem satisfa√ß√£o, prazer e engajamento com o produto.
        
        **Recomenda√ß√µes:**
        - Produto bem recebido pelos consumidores
        - Manter caracter√≠sticas que geram respostas positivas
        - Considerar expans√£o da linha de produtos
        """)
    elif percent_negativo > 60:
        st.error("""
        **‚ùå EXPERI√äNCIA NEGATIVA**
        
        A an√°lise indica uma experi√™ncia predominantemente **negativa** durante o consumo.
        As express√µes faciais sugerem desconforto, desagrado ou insatisfa√ß√£o com o produto.
        
        **Recomenda√ß√µes:**
        - Revisar formula√ß√£o ou caracter√≠sticas do produto
        - Realizar pesquisa qualitativa para entender as obje√ß√µes
        - Considerar reformula√ß√£o ou reposicionamento
        """)
    else:
        st.warning("""
        **‚ö†Ô∏è EXPERI√äNCIA MISTA**
        
        A an√°lise indica uma experi√™ncia **mista** durante o consumo.
        H√° uma combina√ß√£o de respostas positivas e negativas, sugerindo rea√ß√µes variadas ao produto.
        
        **Recomenda√ß√µes:**
        - Segmentar o p√∫blico-alvo
        - Identificar caracter√≠sticas espec√≠ficas que geram respostas positivas/negativas
        - Realizar testes adicionais para entender a variabilidade
        """)

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    
    # Cabe√ßalho
    st.markdown('<h1 class="main-header">üòä An√°lise de Emo√ß√µes Faciais</h1>', unsafe_allow_html=True)
    st.markdown("### Upload e an√°lise do arquivo CSV de resultados")
    
    # Upload do arquivo
    uploaded_file = st.file_uploader(
        "Carregue o arquivo CSV com os resultados das emo√ß√µes:",
        type=['csv'],
        help="Arquivo deve conter colunas para cada emo√ß√£o e uma coluna 'file' com o caminho da imagem"
    )
    
    if uploaded_file is not None:
        # Carregar dados
        with st.spinner('Carregando e processando dados...'):
            df = carregar_dados(uploaded_file)
            
            if df is not None:
                # Verificar se as colunas necess√°rias existem
                colunas_necessarias = ['file']
                colunas_faltantes = [col for col in colunas_necessarias if col not in df.columns]
                
                if colunas_faltantes:
                    st.error(f"Colunas faltantes no arquivo: {colunas_faltantes}")
                    st.info("O arquivo deve conter uma coluna 'file' com os caminhos das imagens.")
                else:
                    df_processed, emocao_hedonica = processar_dados_hedonicos(df)
                    
                    # Abas para organiza√ß√£o
                    tab1, tab2, tab3, tab4 = st.tabs([
                        "üìà Vis√£o Geral", 
                        "üë§ An√°lise Individual", 
                        "üçΩÔ∏è An√°lise Hed√¥nica",
                        "üìã Relat√≥rio Final"
                    ])
                    
                    with tab1:
                        criar_metricas_gerais(df, df_processed)
                        criar_visualizacao_geral(df, df_processed)
                    
                    with tab2:
                        criar_analise_individual(df_processed)
                    
                    with tab3:
                        criar_analise_detalhada_hedonica(df_processed)
                    
                    with tab4:
                        criar_relatorio_final(df, df_processed)
                    
                    # Sidebar com informa√ß√µes adicionais
                    st.sidebar.markdown("## ‚ÑπÔ∏è Informa√ß√µes do Dataset")
                    st.sidebar.write(f"**Arquivo:** {uploaded_file.name}")
                    st.sidebar.write(f"**Total de linhas:** {len(df):,}")
                    st.sidebar.write(f"**Total de colunas:** {len(df.columns)}")
                    st.sidebar.write(f"**Pessoas analisadas:** {df_processed['pessoa_id'].nunique()}")
                    
                    st.sidebar.markdown("## üì• Download de Resultados")
                    
                    # Op√ß√£o para download dos dados processados
                    csv_processed = df_processed.to_csv(index=False)
                    st.sidebar.download_button(
                        label="üìä Baixar dados processados (CSV)",
                        data=csv_processed,
                        file_name="dados_processados_analise_emocional.csv",
                        mime="text/csv"
                    )
                
    else:
        # Instru√ß√µes quando n√£o h√° arquivo
        st.info("""
        ### üìã Como usar esta aplica√ß√£o:
        
        1. **Fa√ßa upload** do arquivo CSV com os resultados das emo√ß√µes
        2. **Aguarde** o processamento dos dados
        3. **Navegue** pelas abas para explorar as an√°lises:
           - üìà **Vis√£o Geral**: M√©tricas e distribui√ß√µes gerais
           - üë§ **An√°lise Individual**: Detalhes por pessoa
           - üçΩÔ∏è **An√°lise Hed√¥nica**: Correla√ß√µes emocionais
           - üìã **Relat√≥rio Final**: Insights e avalia√ß√£o
        
        ### üéØ Formato esperado do CSV:
        - Colunas para cada emo√ß√£o (happy, sad, angry, etc.)
        - Coluna 'file' com caminho das imagens
        - Valores entre 0 e 1 representando probabilidades
        
        **Exemplo de formato:**
        ```
        happy,angry,sad,neutral,file
        0.8,0.1,0.05,0.05,outputFramesVideo/frames/pessoa_001/frame_000000.jpg
        0.6,0.2,0.1,0.1,outputFramesVideo/frames/pessoa_001/frame_000001.jpg
        ```
        """)

if __name__ == "__main__":
    main()